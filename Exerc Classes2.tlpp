#include 'tlpp-core.th'

User Function testeCarro()

	Local oCarro as object
	Local cJson as character

	oCarro := Carro():new('Fiat', 'Uno', 'Azul', 2010)
	oCarro:setmudacor('Branco')
	oCarro:setMarca('Fiat')
	oCarro:setCor('Azul')
	oCarro:Ligar()
	oCarro:Acelerar(10)
	oCarro:Frear(5)
	oCarro:TrocarMarcha('D')
	oCarro:Abastecer(10)
	cJson := oCarro:Dados()
	conout(cJson)

Return


	Class Carro
		//Define os atributos da classe
		public Data cCor                 as character
		private Data cMarca               as character
		private Data cMarcha              as character
		private Data cModelo              as character
		private Data cNivelCombustivel    as character
		private Data lLigado              as logical
		private Data nAno                 as numeric
		private Data nAutonomia           as numeric
		private Data nCapacidadeTanque    as numeric
		private Data nCombustivelRestante as numeric
		private Data nConsumoPorKM        as numeric
		private Data nQuantidadePortas    as numeric
		private Data nQuilometragemTotal  as numeric
		private Data nVelocidadeAtual     as numeric
		private Data nVelocidadeMax       as numeric
		private Data ojson                as json

		//Define os métodos da classe
		Public Method new(marca, modelo, cor, ano) constructor
		Public Method Ligar()
		Public Method Desligar()
		Public Method Acelerar(qtdAceleracao)
		Public Method Frear(qtdFrenagem)
		Public Method TrocarMarcha(marcha)
		Public Method Abastecer(qtdCombustivel)
		Public Method Dados()

		//Define os métodos de acesso aos atributos da classe
		//Metodos set e get

		Public Method setmudacor(cCor)
		Public Method setCor(cCor)
		Public Method setMarca(cMarca)
		Public Method setAno(nAno)
		Public Method setModelo(cModelo)
		Public Method setQtdPortas(nQtdPortas)

		Public Method getMarca()
		Public Method getAno()
		Public Method getModelo()
		Public Method getQtdPortas()
		Public Method getMarcha()
		Public Method getLigado()
		Public Method getAutonomia()


	EndClass

Method new(marca, modelo, cor, ano) class Carro
	//self:cCor                	:= cor
	self:cMarca              	:= marca
	self:cMarcha             	:= ''
	self:cModelo             	:= modelo
	self:cNivelCombustivel   	:= ''
	self:lLigado             	:= .F.
	self:nAno                	:= ano
	self:nAutonomia          	:= 0
	self:nCapacidadeTanque   	:= 0
	self:nCombustivelRestante	:= 0
	self:nConsumoPorKM       	:= 0
	self:nQuantidadePortas   	:= 0
	self:nQuilometragemTotal 	:= 0
	self:nVelocidadeAtual    	:= 0
	self:nVelocidadeMax      	:= 0
	self:ojson               	:= JsonObject():New()
	self:setcor(cor)
Return

//Métodos SET:
Method setmudacor(cCor as character) class Carro
	self:setcor(cCor)
Return

Method setCor(cCor as character) class Carro
	If cCor $ 'Azul|Branco|Amarelo'
		Self:cCor := cCor
	Else
		conout('Cor inválida')
	EndIf
Return

//Ver com STEVE: os 3 sets abaixo (marca ano e modelo) já foram setados no metodo new, tem alguma restrição criar um set pra eles?
Method setMarca(cMarca as character) class Carro
	self:cMarca := cMarca
Return

Method setAno(nAno as numeric) class Carro
	self:nAno := nAno
Return

Method setModelo(cModelo as character) class Carro
	self:cModelo := cModelo
Return

Method setQtdPortas(nQtdPortas as numeric) class Carro
	self:nQuantidadePortas := nQtdPortas
Return



//Métodos GET:
Method getMarca() class Carro
	conout('A Marca do carro é: '+ (Self:cMarca))
Return

Method getAno() class Carro
	conout('O Ano do carro é: ' + cValToChar(Self:nAno))
Return

Method getModelo() class Carro
	conout('O Modelo do carro é: '+ (Self:cModelo))
Return

Method getMarcha() class Carro
	self:cMarcha := cMarcha
Return

Method getQtdPortas() class Carro
	conout('A Quantidade de portas do carro é: '+ cValToChar(Self:nQuantidadePortas))
Return

Method getLigado() class Carro
	Local cReturn := ""

	If Self:lLigado
		cReturn := 'ligado'
	Else
		cReturn := 'desligado'
	EndIf

Return cReturn

Method getAutonomia() class Carro
	conout('A autonomia do carro é: '+ cValToChar(Self:nAutonomia))
Return






Method Ligar() class Carro
	Self:lLigado := .T.
	conout('O carro foi ligado')
Return

Method Desligar() class Carro
	Self:lLigado := .F.
	conout('O carro foi desligado')
Return

Method Acelerar(nQtdAceleracao as numeric) class Carro
	Self:nVelocidadeAtual += nQtdAceleracao
	conout('A velocidade atual do carro é:' + cValToChar(Self:nVelocidadeAtual))
Return

Method Frear(nQtdFrenagem as numeric) class Carro
	Self:nVelocidadeAtual -= nQtdFrenagem
	conout('A velocidade atual do carro é:' + cValToChar(Self:nVelocidadeAtual))
Return

Method TrocarMarcha(cMarcha as character) class Carro
	if(cMarcha $ 'PRND')
		conout ('Selecionar uma marcha (P,R,N,D)')
	else
		Self:cMarcha := cMarcha
		conout('A marcha atual do carro é:' + (Self:cMarcha))
	endIf
Return

Method Abastecer(nQtdCombustivel as numeric) class Carro
	Self:ncombustivelRestante += nQtdCombustivel
	conout('A quantidade de combustível atual do carro é:' + cValToChar(Self:ncombustivelRestante))
Return

Method Dados() class Carro

	self:ojson := JsonObject():New()
	self:ojson['marca'] := self:cMarca
	self:ojson['modelo'] := self:cModelo
	self:ojson['cor'] := self:cCor
	self:ojson['ano'] := self:nAno
	self:ojson['velocidadeMax'] := self:nVelocidadeMax
	self:ojson['velocidadeAtual'] := self:nVelocidadeAtual
	self:ojson['ligado'] := self:lLigado
	self:ojson['nivelCombustivel'] := self:cNivelCombustivel
	self:ojson['consumoPorKM'] := self:nConsumoPorKM
	self:ojson['capacidadeTanque'] := self:nCapacidadeTanque
	self:ojson['quilometragemTotal'] := self:nQuilometragemTotal
	self:ojson['quantidadePort'] := self:nQuantidadePortas
	self:ojson['marcha'] := self:cMarcha
	self:ojson['autonomia'] := self:nAutonomia
	self:ojson['combustivelRestante'] := self:nCombustivelRestante

Return Self:ojson:tojson()
