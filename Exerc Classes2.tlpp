#include 'tlpp-core.th'



User Function testclass()

	Local oCarro as object
	Local cJson as character

	oCarro := Carro():new('Fiat', 'Uno', 'Azul', 2010)
	oCarro:setmudacor('Branco')
	oCarro:setMarca('Fiat')
	oCarro:setCor('Azul')
	oCarro:setCor('Verde')
	oCarro:Ligar()
	oCarro:Acelerar(10)
	oCarro:Frear(5)
	oCarro:TrocarMarcha('D')
	oCarro:Abastecer(10)
	cJson := oCarro:Dados()
	conout(cJson)

Return


Class Carro
	//Define os atributos da classe
	public Data cCor                 as character
	private Data cMarca               as character
	private Data cMarcha              as character
	private Data cModelo              as character
	private Data cNivelCombustivel    as character
	private Data lLigado              as logical	
	private Data nAno                 as numeric
	private Data nAutonomia           as numeric
	private Data nCapacidadeTanque    as numeric
	private Data nCombustivelRestante as numeric
	private Data nConsumoPorKM        as numeric
	private Data nQuantidadePortas    as numeric
	private Data nQuilometragemTotal  as numeric
	private Data nVelocidadeAtual     as numeric
	private Data nVelocidadeMax       as numeric
	private Data ojson                as json

	//Define os métodos da classe
	Public Method new(marca, modelo, cor, ano) constructor
	Public Method Ligar()
	Public Method Desligar()
	Public Method Acelerar(qtdAceleracao)
	Public Method Frear(qtdFrenagem)
	Public Method TrocarMarcha(marcha)
	Public Method Abastecer(qtdCombustivel)
	Public Method Dados()

	//Define os métodos de acesso aos atributos da classe
	//Metodos set e get

	Public Method setmudacor(cCor)
	Public Method setCor(cCor)
	Public Method setMarca(cMarca)

	Public Method getLigado()
	Public Method getAutonomia()
EndClass

Method new(marca, modelo, cor, ano) class Carro
	//self:cCor                	:= cor
	self:cMarca              	:= marca
	self:cMarcha             	:= ''
	self:cModelo             	:= modelo
	self:cNivelCombustivel   	:= ''
	self:lLigado             	:= .F.	
	self:nAno                	:= ano
	self:nAutonomia          	:= 0
	self:nCapacidadeTanque   	:= 0
	self:nCombustivelRestante	:= 0
	self:nConsumoPorKM       	:= 0
	self:nQuantidadePortas   	:= 0
	self:nQuilometragemTotal 	:= 0
	self:nVelocidadeAtual    	:= 0
	self:nVelocidadeMax      	:= 0
	self:ojson               	:= JsonObject():New()

	self:setcor(cor)
Return

Method setmudacor(cCor as character) class Carro
	self:setcor(cCor)
Return

Method setMarca(cMarca as character) class Carro
	self:cMarca := cMarca
Return

Method getLigado() class Carro
	Local cReturn := ""

	If Self:lLigado
		cReturn := 'ligado'
	Else
		cReturn := 'desligado'
	EndIf

Return cReturn

Method setCor(cCor as character) class Carro
	If cCor $ 'Azul|Branco|Amarelo'
		Self:cCor := cCor
	Else
		conout('Cor inválida')
	EndIf
Return

Method Ligar() class Carro
	Self:lLigado := .T.
	conout('O carro foi ligado')
Return

Method Desligar() class Carro
	Self:lLigado := .F.
	self:setcor('Preto')
	conout('O carro foi desligado')
Return

Method Acelerar(nQtdAceleracao as numeric) class Carro
	Self:nVelocidadeAtual += nQtdAceleracao
	conout('A velocidade atual do carro é:' + cValToChar(Self:nVelocidadeAtual))
Return

Method Frear(nQtdFrenagem as numeric) class Carro
	Self:nVelocidadeAtual -= nQtdFrenagem
	conout('A velocidade atual do carro é:' + cValToChar(Self:nVelocidadeAtual))
Return

Method TrocarMarcha(cMarcha as character) class Carro
	if(cMarcha <> 'P' .or. cMarcha <> 'R' .or.cMarcha <> 'N' .or. cMarcha <> 'D')  // cMarcha $ 'PRND'
		conout ('Selecionar uma marcha (P,R,N,D)')
	else
		Self:cMarcha := cMarcha
		conout('A velocidade atual do carro é:' + cValToChar(Self:nVelocidadeAtual))
	endIf
Return

Method Abastecer(nQtdCombustivel as numeric) class Carro
	Self:ncombustivelRestante += nQtdCombustivel
	conout('A quantidade de combustível atual do carro é:' + cValToChar(Self:ncombustivelRestante))
Return

Method Dados() class Carro	

	self:ojson := JsonObject():New()
	self:ojson['marca'] := self:cMarca
	self:ojson['modelo'] := self:cModelo
	self:ojson['cor'] := self:cCor	
	self:ojson['ano'] := self:nAno
	self:ojson['velocidadeMax'] := self:nVelocidadeMax
	self:ojson['velocidadeAtual'] := self:nVelocidadeAtual
	self:ojson['ligado'] := self:lLigado
	self:ojson['nivelCombustivel'] := self:cNivelCombustivel
	self:ojson['consumoPorKM'] := self:nConsumoPorKM
	self:ojson['capacidadeTanque'] := self:nCapacidadeTanque
	self:ojson['quilometragemTotal'] := self:nQuilometragemTotal
	self:ojson['quantidadePort'] := self:nQuantidadePortas
	self:ojson['marcha'] := self:cMarcha
	self:ojson['autonomia'] := self:nAutonomia
	self:ojson['combustivelRestante'] := self:nCombustivelRestante	
	
Return Self:ojson:tojson()
































